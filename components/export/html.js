import { flattenBookmarks } from "../bookmarks.js"
import { translations } from "../utils.js"

export async function exportToHTML(
  bookmarkTreeNodes,
  includeIconData,
  includeCreationDates,
  includeFolderModDates,
  language,
  currentTheme
) {
  let faviconMap = {}
  let bookmarkTags = {}

  // Fetch tags from chrome.storage.local
  try {
    const storageData = await new Promise((resolve) =>
      chrome.storage.local.get(["bookmarkTags"], resolve)
    )
    bookmarkTags = storageData.bookmarkTags || {}
  } catch (error) {
    console.error("Failed to fetch bookmarkTags:", error)
  }

  if (includeIconData) {
    const bookmarksWithUrls = flattenBookmarks(bookmarkTreeNodes).filter(
      (b) => b.url
    )
    for (const bookmark of bookmarksWithUrls) {
      faviconMap[
        bookmark.url
      ] = `https://www.google.com/s2/favicons?sz=32&domain=${encodeURIComponent(
        bookmark.url
      )}`
    }
  }

  // Define the translations object to be embedded in the HTML
  const embeddedTranslations = {
    bookmarksTitle:
      translations[language].bookmarksTitle || "My Bookmarks Collection",
    bookmarksHeader: translations[language].bookmarksHeader || "My Bookmarks",
    exportedOn: translations[language].exportedOn || "Exported on",
    searchPlaceholder:
      translations[language].searchPlaceholder || "Search bookmarks...",
    listView: translations[language].listView || "List",
    gridView: translations[language].gridView || "Grid",
    treeView: translations[language].treeView || "Tree",
    loadingBookmarks:
      translations[language].loadingBookmarks || "Loading bookmarks...",
    generatedBy:
      translations[language].generatedBy ||
      "Generated by Bookmark Manager Extension",
    scrollToTop: translations[language].scrollToTop || "Scroll to Top",
    notAvailable: translations[language].notAvailable || "N/A",
    created: translations[language].created || "Created",
    modified: translations[language].modified || "Modified",
    unnamedFolder: translations[language].unnamedFolder || "Unnamed Folder",
    bookmarks: translations[language].bookmarks || "bookmarks",
    folders: translations[language].folders || "folders",
    tags: translations[language].tags || "Tags", // Added for tag labels
  }

  const cssTheme = `
    :root {
        ${
          currentTheme === "dark"
            ? `
        --bg-primary: #0a0a0a;
        --bg-secondary: #1a1a1a;
        --bg-tertiary: #2a2a2a;
        --bg-card: #1e1e1e;
        --text-primary: #ffffff;
        --text-secondary: #cbd5e1;
        --text-muted: #94a3b8;
        --border-color: #2d3748;
        --accent-color: #3182ce;
        --accent-hover: #2c5aa0;
        --hover-bg: #2d3748;
        --folder-title-color: #ffffff;
        --folder-bg: var(--bg-primary);
        --folder-hover-bg: rgba(255, 255, 255, 0.05);
        --bookmark-bg: rgba(255, 255, 255, 0.02);
        --bookmark-hover-bg: rgba(255, 255, 255, 0.08);
        --tag-bg: #4a5568;
        --tag-text: #e2e8f0;
        `
            : currentTheme === "dracula"
            ? `
        --bg-primary: #282a36;
        --bg-secondary: #242424;
        --bg-tertiary: #373844;
        --bg-card: #282a36;
        --text-primary: #ffffff;
        --text-secondary: #50fa7b;
        --text-muted: #6272a4;
        --border-color: #6272a4;
        --accent-color: #ff79c6;
        --accent-hover: #ff92df;
        --hover-bg: #3a3c4e;
        --folder-title-color: #bd93f9;
        --folder-bg: var(--bg-primary);
        --folder-hover-bg: rgba(80, 250, 123, 0.1);
        --bookmark-bg: rgba(255, 255, 255, 0.02);
        --bookmark-hover-bg: rgba(255, 255, 255, 0.08);
        --tag-bg: #44475a;
        --tag-text: #f8f8f2;
        `
            : currentTheme === "onedark"
            ? `
        --bg-primary: #282c34;
        --bg-secondary: #21252b;
        --bg-tertiary: #2c313c;
        --bg-card: #282c34;
        --text-primary: #ffffff;
        --text-secondary: #c678dd;
        --text-muted: #5c6370;
        --border-color: #3e4451;
        --accent-color: #61afef;
        --accent-hover: #4fa8ff;
        --hover-bg: #323842;
        --folder-title-color: #e5c07b;
        --folder-bg: var(--bg-primary);
        --folder-hover-bg: rgba(152, 195, 121, 0.1);
        --bookmark-bg: rgba(255, 255, 255, 0.02);
        --bookmark-hover-bg: rgba(255, 255, 255, 0.08);
        --tag-bg: #3e4451;
        --tag-text: #abb2bf;
        `
            : `
        /* Default: light theme */
        --bg-primary: #ffffff;
        --bg-secondary: #f8fafc;
        --bg-tertiary: #e2e8f0;
        --bg-card: #ffffff;
        --text-primary: #1a202c;
        --text-secondary: #4a5568;
        --text-muted: #718096;
        --border-color: #e2e8f0;
        --accent-color: #000000;
        --accent-hover: #2c5aa0;
        --hover-bg: #f7fafc;
        --folder-title-color: #000000;
        --folder-bg: var(--bg-primary);
        --folder-hover-bg: rgba(112, 161, 70, 0.15);
        --bookmark-bg: rgba(0, 0, 0, 0.02);
        --bookmark-hover-bg: rgba(0, 0, 0, 0.05);
        --tag-bg: #edf2f7;
        --tag-text: #2d3748;
        `
        }
        
        /* Shared styles */
        --success-color: #48bb78;
        --warning-color: #ed8936;
        --error-color: #f56565;
        --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1),
                    0 1px 2px rgba(0, 0, 0, 0.06);
        --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1),
                    0 2px 4px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1),
                    0 4px 6px rgba(0, 0, 0, 0.05);
        --border-radius: 0.5rem;
        --border-radius-lg: 0.75rem;
        --transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    * {
      box-sizing: border-box;
    }

    body { 
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
      margin: 0;
      padding: 20px;
      background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
      color: var(--text-primary);
      min-height: 100vh;
      line-height: 1.6;
    }
    
    .container { 
      max-width: 1400px;
      margin: 0 auto;
      background: var(--bg-card);
      color: var(--text-primary);
      border-radius: var(--border-radius-lg);
      box-shadow: var(--shadow-lg);
      overflow: hidden;
      position: relative;
    }
    
    .header {
      background: linear-gradient(135deg, var(--accent-color) 0%, var(--accent-hover) 100%);
      color: white;
      padding: 2rem;
      text-align: center;
    }
    
    .header h1 {
      margin: 0;
      font-size: 2.5rem;
      font-weight: 700;
    }
    
    .header p {
      margin: 0.5rem 0 0;
      opacity: 0.9;
      font-size: 1.1rem;
    }
    
    .controls { 
      padding: 1rem 2rem;
      background: var(--bg-secondary);
      border-bottom: 1px solid var(--border-color);
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
      position: sticky;
      top: 0;
      z-index: 10;
    }
    
    #searchInput { 
      flex: 1;
      min-width: 300px;
      padding: 0.75rem 1rem;
      border: 2px solid var(--border-color);
      border-radius: var(--border-radius);
      font-size: 1rem;
      background: var(--bg-card);
      color: var(--text-primary);
      transition: var(--transition);
    }
    
    #searchInput:focus {
      outline: none;
      border-color: var(--accent-color);
      box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
    }
    
    .view-toggle { 
      padding: 0.75rem 1.5rem;
      border: 2px solid var(--border-color);
      border-radius: var(--border-radius);
      background: var(--bg-card);
      color: var(--text-primary);
      cursor: pointer;
      font-size: 0.9rem;
      font-weight: 500;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    
    .view-toggle:hover { 
      background: var(--hover-bg);
      transform: translateY(-1px);
    }
    
    .view-toggle.active { 
      background: var(--accent-hover);
      color: white;
    }
    
    .content-area {
      padding: 2rem;
    }
    
    .bookmark-list { 
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .bookmark-list li { 
      padding: 1rem;
      margin-bottom: 0.5rem;
      background: var(--bg-card);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      transition: var(--transition);
    }
    
    .bookmark-list li:hover { 
      background: var(--hover-bg);
      transform: translateY(-1px);
      box-shadow: var(--shadow-md);
    }
    
    .bookmark-grid { 
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 1.5rem;
      margin: 0;
      padding: 0;
    }
    
    .bookmark-grid .bookmark-item { 
      background: var(--bg-card);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      padding: 1.5rem;
      transition: var(--transition);
      text-align: center;
    }
    
    .bookmark-grid .bookmark-item:hover { 
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg);
      border-color: var(--accent-color);
    }
    
    .bookmark-item a { 
      text-decoration: none;
      color: var(--text-primary);
      font-weight: 500;
      font-size: 1rem;
      transition: var(--transition);
    }
    
    .bookmark-item a:hover { 
      color: var(--accent-hover);
    }
    
    .bookmark-item img { 
      width: 20px;
      height: 20px;
      margin-right: 0.75rem;
      vertical-align: middle;
      border-radius: 0.25rem;
    }
    
    .folder { 
      font-weight: 600;
      margin: 0.5rem 0;
      cursor: pointer;
      color: var(--text-primary);
      padding: 1rem;
      background: var(--bg-secondary);
      border-radius: var(--border-radius);
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .folder::before { 
      content: "📁";
      font-size: 1.25rem;
      transition: var(--transition);
    }
    
    .folder.open::before { 
      content: "📂";
      transform: scale(1.1);
    }
    
    .nested { 
      padding-left: 1.5rem;
      margin-left: 0;
      border-left: 2px solid var(--border-color);
      display: none;
    }
    
    .open > .nested { 
      display: block;
      animation: slideDown 0.3s ease-out;
    }
    
    @keyframes slideDown {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .tree-view { 
      list-style: none;
      padding: 0;
      margin: 0;
      display: block;
    }
    
    .tree-view li {
      display: block;
    }
    
    .hidden { 
      display: none !important;
    }
    
    .meta-info { 
      font-size: 0.875rem;
      color: var(--text-muted);
      margin-top: 0.5rem;
      padding: 0.5rem;
      background: var(--bg-secondary);
      border-radius: 0.25rem;
    }
    
    .tag {
      display: inline-block;
      background: var(--tag-bg);
      color: var(--tag-text);
      padding: 0.2rem 0.6rem;
      border-radius: 0.25rem;
      font-size: 0.75rem;
      margin: 0.2rem;
      transition: var(--transition);
    }
    
    .tag:hover {
      background: var(--accent-hover);
      color: white;
    }
    
    .tags-container {
      margin-top: 0.5rem;
      display: flex;
      flex-wrap: wrap;
      gap: 0.3rem;
    }
    
    .stats-bar {
      background: var(--bg-secondary);
      padding: 1rem 2rem;
      border-top: 1px solid var(--border-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 0.9rem;
      color: var(--text-secondary);
    }
    
    .scroll-to-top {
      item-align: center;
      justify-content: center;
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      background: var(--bg-primary);
      color: var(--text-primary);
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius);
      padding: 0.75rem;
      cursor: pointer;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.2s ease;
      z-index: 20;
    }
    
    .scroll-to-top.visible {
      opacity: 1;
      visibility: visible;
    }
    
    .scroll-to-top:hover {
      color: white;
      background: var(--accent-hover);
      transform: translateY(-2px);
    }
    
    .scroll-to-top svg {
      width: 20px;
      height: 20px;
    }
    
    @media (max-width: 768px) {
      .controls {
        flex-direction: column;
        align-items: stretch;
        padding: 0.75rem 1rem;
      }
      
      #searchInput {
        min-width: unset;
      }
      
      .bookmark-grid {
        grid-template-columns: 1fr;
      }
      
      .stats-bar {
        flex-direction: column;
        gap: 0.5rem;
      }
      
      .scroll-to-top {
        bottom: 1rem;
        right: 1rem;
        padding: 0.5rem;
      }
    }
  `

  const htmlTemplate = `
      <!DOCTYPE html>
      <html lang="${language}" data-theme="${currentTheme}">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${embeddedTranslations.bookmarksTitle}</title>
        <link rel="icon" type="image/png" href="https://github.com/ChickenSoup269/Extension_Bookmark-Manager/blob/main/icons/icon.png?raw=true">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
        <style>${cssTheme}</style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1><i class="far fa-bookmark"></i> ${
              embeddedTranslations.bookmarksHeader
            }</h1>
            <p>${
              embeddedTranslations.exportedOn
            } ${new Date().toLocaleDateString(language)}</p>
          </div>
          
          <div class="controls">
            <input type="text" id="searchInput" placeholder="${
              embeddedTranslations.searchPlaceholder
            }">
            <button class="view-toggle active" id="listViewBtn" onclick="toggleView('list')">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="8" y1="6" x2="21" y2="6"></line>
                <line x1="8" y1="12" x2="21" y2="12"></line>
                <line x1="8" y1="18" x2="21" y2="18"></line>
                <line x1="3" y1="6" x2="3.01" y2="6"></line>
                <line x1="3" y1="12" x2="3.01" y2="12"></line>
                <line x1="3" y1="18" x2="3.01" y2="18"></line>
              </svg>
              ${embeddedTranslations.listView}
            </button>
            <button class="view-toggle" id="gridViewBtn" onclick="toggleView('grid')">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="3" width="7" height="7"></rect>
                <rect x="14" y="3" width="7" height="7"></rect>
                <rect x="14" y="14" width="7" height="7"></rect>
                <rect x="3" y="14" width="7" height="7"></rect>
              </svg>
              ${embeddedTranslations.gridView}
            </button>
            <button class="view-toggle" id="treeViewBtn" onclick="toggleView('tree')">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M22 17a2 2 0 0 1-2 2H3s0-2 9-2 9 2 9 2Z"></path>
                <path d="M5 17a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5Z"></path>
              </svg>
              ${embeddedTranslations.treeView}
            </button>
          </div>
          
          <div class="content-area">
            <ul id="bookmarkList" class="bookmark-list"></ul>
            <div id="bookmarkGrid" class="bookmark-grid hidden"></div>
            <ul id="bookmarkTree" class="tree-view hidden"></ul>
          </div>
          
          <div class="stats-bar">
            <span id="bookmarkCount">${
              embeddedTranslations.loadingBookmarks
            }</span>
            <span>${embeddedTranslations.generatedBy}</span>
          </div>
          
          <button class="scroll-to-top" id="scrollToTop" title="${
            embeddedTranslations.scrollToTop
          }">
            <i class="fas fa-chevron-up"></i>
          </button>
        </div>
        
        <script>
          const translations = ${JSON.stringify(embeddedTranslations)};
          const bookmarks = ${JSON.stringify(bookmarkTreeNodes)};
          const includeIconData = ${JSON.stringify(includeIconData)};
          const includeCreationDates = ${JSON.stringify(includeCreationDates)};
          const includeFolderModDates = ${JSON.stringify(
            includeFolderModDates
          )};
          const faviconMap = ${JSON.stringify(faviconMap)};
          const bookmarkTags = ${JSON.stringify(bookmarkTags)};
          
          const listContainer = document.getElementById("bookmarkList");
          const gridContainer = document.getElementById("bookmarkGrid");
          const treeContainer = document.getElementById("bookmarkTree");
          const searchInput = document.getElementById("searchInput");
          const listViewBtn = document.getElementById("listViewBtn");
          const gridViewBtn = document.getElementById("gridViewBtn");
          const treeViewBtn = document.getElementById("treeViewBtn");
          const bookmarkCount = document.getElementById("bookmarkCount");
          const scrollToTopBtn = document.getElementById("scrollToTop");
          
          let totalBookmarks = 0;
          let totalFolders = 0;

          function formatDate(timestamp) {
            return timestamp ? new Date(timestamp).toLocaleString('${language}') : translations.notAvailable;
          }
          
          function countBookmarks(nodes) {
            nodes.forEach(node => {
              if (node.url) {
                totalBookmarks++;
              } else if (node.children) {
                totalFolders++;
                countBookmarks(node.children);
              }
            });
          }

          function renderTags(bookmarkId) {
            const tags = bookmarkTags[bookmarkId] || [];
            if (!tags.length) return '';
            return \`<div class="tags-container"><span class="meta-info"><i class="fas fa-tags"></i> \${translations.tags}: \${tags.map(tag => \`<span class="tag">\${tag}</span>\`).join('')}</span></div>\`;
          }

          function renderBookmarks(nodes, parent = listContainer, gridParent = gridContainer, treeParent = treeContainer, depth = 0) {
            const folders = nodes.filter(node => node.children);
            const bookmarksOnly = nodes.filter(node => node.url);

            nodes.forEach(node => {
              if (node.url) {
                const li = document.createElement("li");
                li.className = "bookmark-item";
                if (includeIconData && faviconMap[node.url]) {
                  li.innerHTML = \`<img src="\${faviconMap[node.url]}" onerror="this.src='data:image/svg+xml,<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\"><path d=\\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\\"/><path d=\\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\\"/></svg><a href="\${node.url}" target="_blank">\${node.title || node.url}</a>\`;
                } else {
                  li.innerHTML = \`<a href="\${node.url}" target="_blank">\${node.title || node.url}</a>\`;
                }
                if (includeCreationDates) {
                  li.innerHTML += \`<div class="meta-info"><i class="far fa-calendar"></i> \${translations.created}: \${formatDate(node.dateAdded)}</div>\`;
                }
                li.innerHTML += renderTags(node.id);
                parent.appendChild(li);

                const gridItem = document.createElement("div");
                gridItem.className = "bookmark-item";
                if (includeIconData && faviconMap[node.url]) {
                  gridItem.innerHTML = \`<img src="\${faviconMap[node.url]}" onerror="this.src='data:image/svg+xml,<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\"><path d=\\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\\"/><path d=\\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\\"/></svg><a href="\${node.url}" target="_blank">\${node.title || node.url}</a>\`;
                } else {
                  gridItem.innerHTML = \`<a href="\${node.url}" target="_blank">\${node.title || node.url}</a>\`;
                }
                if (includeCreationDates) {
                  gridItem.innerHTML += \`<div class="meta-info"><i class="far fa-calendar"></i> \${translations.created}: \${formatDate(node.dateAdded)}</div>\`;
                }
                gridItem.innerHTML += renderTags(node.id);
                gridParent.appendChild(gridItem);
              }
            });

            [...folders, ...bookmarksOnly].forEach(node => {
              const treeItem = document.createElement("li");
              if (node.url) {
                treeItem.className = "bookmark-item";
                if (includeIconData && faviconMap[node.url]) {
                  treeItem.innerHTML = \`<img src="\${faviconMap[node.url]}" onerror="this.src='data:image/svg+xml,<svg xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\"><path d=\\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\\"/><path d=\\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\\"/></svg><a href="\${node.url}" target="_blank">\${node.title || node.url}</a>\`;
                } else {
                  treeItem.innerHTML = \`<a href="\${node.url}" target="_blank">\${node.title || node.url}</a>\`;
                }
                if (includeCreationDates) {
                  treeItem.innerHTML += \`<div class="meta-info"><i class="far fa-calendar"></i> \${translations.created}: \${formatDate(node.dateAdded)}</div>\`;
                }
                treeItem.innerHTML += renderTags(node.id);
              } else if (node.children) {
                treeItem.className = "folder";
                treeItem.textContent = node.title || translations.unnamedFolder;
                if (includeCreationDates || includeFolderModDates) {
                  const metaDiv = document.createElement("div");
                  metaDiv.className = "meta-info";
                  if (includeCreationDates) {
                    metaDiv.innerHTML += \`\${translations.created}: \${formatDate(node.dateAdded)}<br>\`;
                  }
                  if (includeFolderModDates) {
                    metaDiv.innerHTML += \`\${translations.modified}: \${formatDate(node.dateGroupModified)}\`;
                  }
                  treeItem.appendChild(metaDiv);
                }
                const nestedList = document.createElement("ul");
                nestedList.className = "nested";
                treeItem.appendChild(nestedList);
                treeItem.addEventListener("click", (e) => {
                  e.stopPropagation();
                  treeItem.classList.toggle("open");
                });
                renderBookmarks(node.children, parent, gridParent, nestedList, depth + 1);
              }
              treeParent.appendChild(treeItem);
            });
          }

          function toggleView(view) {
            listContainer.classList.add("hidden");
            gridContainer.classList.add("hidden");
            treeContainer.classList.add("hidden");
            listViewBtn.classList.remove("active");
            gridViewBtn.classList.remove("active");
            treeViewBtn.classList.remove("active");
            
            if (view === "list") {
              listContainer.classList.remove("hidden");
              listViewBtn.classList.add("active");
            } else if (view === "grid") {
              gridContainer.classList.remove("hidden");
              gridViewBtn.classList.add("active");
            } else if (view === "tree") {
              treeContainer.classList.remove("hidden");
              treeViewBtn.classList.add("active");
            }
          }

          function filterBookmarks() {
            const query = searchInput.value.toLowerCase();
            const items = document.querySelectorAll(".bookmark-item, .folder");
            let visibleCount = 0;
            
            items.forEach(item => {
              const text = item.textContent.toLowerCase();
              const isVisible = text.includes(query);
              item.style.display = isVisible ? "" : "none";
              
              if (isVisible && item.classList.contains("bookmark-item")) {
                visibleCount++;
              }
              
              if (item.classList.contains("folder") && item.querySelector(".bookmark-item")) {
                const hasVisibleChild = Array.from(item.querySelectorAll(".bookmark-item")).some(child => 
                  child.textContent.toLowerCase().includes(query) && child.style.display !== "none"
                );
                if (hasVisibleChild) {
                  item.style.display = "";
                  item.classList.add("open");
                }
              }
            });
            
            updateBookmarkCount(query ? visibleCount : totalBookmarks);
          }
          
          function updateBookmarkCount(count = totalBookmarks) {
            bookmarkCount.textContent = \`\${count} \${translations.bookmarks} • \${totalFolders} \${translations.folders}\`;
          }

          function toggleScrollToTop() {
            if (window.scrollY > 200) {
              scrollToTopBtn.classList.add("visible");
            } else {
              scrollToTopBtn.classList.remove("visible");
            }
          }

          scrollToTopBtn.addEventListener("click", () => {
            window.scrollTo({ top: 0, behavior: "smooth" });
          });

          window.addEventListener("scroll", toggleScrollToTop);

          countBookmarks(bookmarks);
          updateBookmarkCount();
          searchInput.addEventListener("input", filterBookmarks);
          renderBookmarks(bookmarks);
          toggleView("list");
          toggleScrollToTop();
        </script>
      </body>
      </html>
    `

  const blob = new Blob([htmlTemplate], { type: "text/html" })
  const url = URL.createObjectURL(blob)
  const link = document.createElement("a")
  link.href = url
  link.download = `bookmarks_${new Date().toISOString().split("T")[0]}.html`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}
