// components/utils.js
export const translations = {
  en: {
    allBookmarks: "All Bookmarks",
    sortDefault: "Sort: Default",
    sortNew: "New to Old",
    sortOld: "Old to New",
    sortLastOpened: "By Last Opened",
    sortAZ: "A to Z",
    sortZA: "Z to A",
    sortFavorites: "Favorites",
    createFolder: "Create Folder",
    addToFolder: "Add to Folder",
    deleteFolder: "Delete Folder",
    settings: "Settings",
    exportBookmarks: "Export Bookmarks",
    importBookmarks: "Import Bookmarks",
    selectAll: "Select All",
    showCheckboxes: "Show Checkboxes",
    hideCheckboxes: "Hide Checkboxes",
    searchPlaceholder: "Search bookmarks...",
    renameTitle: "Rename",
    renameFolder: "Rename Folder",
    renamePlaceholder: "Enter new name...",
    addToFolderTitle: "Add to Folder",
    selectFolder: "Select Folder",
    newFolderPlaceholder: "Name folder want to add",
    createNewFolder: "Create",
    save: "Save",
    cancel: "Cancel",
    totalBookmarks: "Total Bookmarks",
    scrollToTop: "Scroll to Top",
    clear: "Clear",
    deleteConfirm: "Are you sure you want to delete this bookmark?",
    deleteFolderConfirm:
      "Are you sure you want to delete this folder? Bookmarks that exist in other folders will be preserved.",
    discardFolderPrompt:
      "You entered a folder name but didn't save. Discard it?",
    noBookmarks: "No bookmarks found. Please check permissions.",
    emptyTitleError: "Title cannot be empty",
    emptyFolderError: "Folder name cannot be empty",
    selectFolderError: "Select a folder or create a new one",
    errorUnexpected: "Unexpected error occurred. Please try again.",
    clearRenameAria: "Clear rename input",
    clearSearchAria: "Clear search input",
    settingsButtonAria: "Open settings menu",
    addToFolderOption: "Add to Folder",
    deleteBookmarkOption: "Delete",
    renameBookmarkOption: "Rename",
    editInNewTabOption: "Edit in New Tab",
    deleteBookmarks: "Delete bookmark",
    importSuccess: "Bookmarks imported successfully!",
    importDuplicatePrompt:
      "Some bookmarks already exist (same URL). Do you want to import the non-duplicate bookmarks?",
    importInvalidFile:
      "Invalid file format. Please select a valid JSON bookmark file.",
    importError: "Failed to import bookmarks. Please try again.",
    deleteBookmarkSuccess: "Bookmark deleted successfully!",
    exportPrompt:
      "Choose export format: JSON or HTML (data will be saved as JSON).",
    createFolderSuccess: "Folder created successfully!",
    confirmTitle: "Confirm",
    successTitle: "Success",
    errorTitle: "Error",
    renameSuccess: "Bookmark renamed successfully!",
    deleteBookmarkSuccess: "Bookmark deleted successfully!",
    addToFolderSuccess:
      "Bookmark(s) added to folder successfully! (Reload to update data)",
    createFolderSuccess: "Folder created successfully!",
    duplicateTitleError: "Title already exists in this folder",
    emptyTitleError: "Please enter a title",
    emptyFolderError: "Please enter a folder name or select a folder",
    noBookmarksSelected: "No bookmarks selected",
    selectFolderError: "Please select a folder",
    errorUnexpected: "An unexpected error occurred",
    restartExtension: "Please try again or restart the extension.",
    deleteConfirm: "Are you sure you want to delete this bookmark?",
    renamePlaceholder: "Enter new bookmark name",
    newFolderPlaceholder: "Enter folder name",
    selectFolder: "Select Folder",
    exportTitle: "Export Bookmarks",
    advancedSettings: "Advanced Settings (HTML & CSV)",
    includeIconData: "Include icon data (Base64)",
    includeCreationDates: "Include creation dates",
    includeFolderModDates: "Include folder modification dates",
    popupSubtitle: "Choose your preferred export format and settings",
    exportFormat: "Export Format",
    jsonDescription: "Machine readable format (backup and restore with import)",
    htmlDescription: "Interactive web page",
    csvDescription: "Tabular data (easily open in Excel/Sheets)",
    includeIconDataDescription: "Add favicon data to bookmarks",
    includeCreationDatesDescription: "Add creation timestamps",
    includeFolderModDatesDescription: "Add folder timestamps",
    exporting: "Exporting...",
    bookmarksTitle: "My Bookmarks Collection",
    bookmarksHeader: "My Bookmarks",
    exportedOn: "Exported on",
    loadingBookmarks: "Loading bookmarks...",
    generatedBy: "Generated by Bookmark Manager Extension",
    bookmarks: "bookmarks",
    folders: "folders",
    created: "Created",
    modified: "Modified",
    unnamedFolder: "Unnamed Folder",
    notAvailable: "N/A",
    scrollToTop: "Scroll to Top",
    aiTitle: "Configure AI Chatbot",
    favourite: "Favourite",
    favoriteSuccess: "Bookmark added to favorites!",
    unfavoriteSuccess: "Bookmark removed from favorites!",
    helpGuideTitle: "Help Guide",
    exportChatHistory: "Export Chat History",
    maximizeMinimize: "Maximize/Minimize",
    editAIConfig: "Edit AI Config",
    closeChat: "Close Chat",
    chatToggle: "Open Chat",
    noChatHistory: "No chat history available",
    loadingChat: "Processing...",
    moveBookmarkSuccess: "Bookmark moved successfully",
    moveBookmarkError: "Bookmark not found or invalid folder",
    searchFolderResult: "Found folders",
    noFoldersFound: "No folders found for",
    aiBookmarkResponse: "AI Response",
    notSupported:
      "Sorry, I can only help with bookmark-related tasks or simple questions like the time or day.",
    youHave: "You have",
    hereAreYourBookmarks: "Here are your bookmarks",
    hereAreYourFolders: "Here are your folders",
    hereAreBookmarksInFolder: "Here are the bookmarks in folder",
    noBookmarksInFolder: "No bookmarks in this folder",
    addedBookmarkToFolder: "I've added the bookmark",
    toFolder: "to the folder",
    updatedBookmark: "I've updated the bookmark",
    inFolder: "in",
    deletedBookmark: "I've deleted the bookmark",
    foundBookmarks: "I found",
    bookmarksMatching: "bookmarks matching",
    noBookmarksFoundFor: "I couldn't find any bookmarks matching",
    foundFolders: "I found these folders",
    noFoldersFoundFor: "I couldn't find any folders matching",
    movedBookmark: "I've moved the bookmark",
    noFolders: "You don't have any folders yet.",
    helpGuide: `
      Help Guide:

      1. Natural Language Queries:
        - Ask freely, e.g., "How many bookmarks do I have?", "Show me my bookmarks", or "Find bookmarks about tech".
        - The AI will interpret and respond with bookmark actions or answers.

      2. Add a Bookmark:
        - Command: "bookmark add https://example.com title 'My Site' to folder News"
        - Or use "Create Folder" in sidebar.

      3. Move a Bookmark:
        - Command: "move bookmark 'My Site' to folder News"
        - Or ask: "Move my bookmark titled 'My Site' to News folder".

      4. Search Bookmarks:
        - Command: "search bookmark keyword" or ask: "Find bookmarks with keyword tech".
        - Use search bar or "Sort: Default" dropdown for manual search.

      5. Search Folders:
        - Command: "search folder keyword" or ask: "Which folders have News in the name?".

      6. List Bookmarks:
        - Command: "list bookmarks" or ask: "What bookmarks do I have?".

      7. Edit a Bookmark:
        - Command: "edit bookmark https://example.com title 'New Title' to folder Work"
        - Or ask: "Rename my bookmark https://example.com to New Title".

      8. Delete a Bookmark:
        - Command: "delete bookmark https://example.com"
        - Or ask: "Remove my bookmark https://example.com".

      9. AI Features:
        - Configure in "Configure AI Chatbot" for suggestions.
        - The AI understands natural questions and commands for bookmark management.

      10. Export/Import Bookmarks:
          - Access via "Settings" menu.
      `,
    clarifyBookmark:
      "I found multiple bookmarks named '{title}'. Please provide the URL or folder to specify which one.",
    noBookmarks: "I couldn't find a bookmark with {0}.",
  },
  vi: {
    // Your vi translations (unchanged, as they are correct)
    allBookmarks: "Tất cả Bookmarks",
    sortDefault: "Sắp xếp: Mặc định",
    sortNew: "Mới đến Cũ",
    sortOld: "Cũ đến Mới",
    sortLastOpened: "Theo Lần Mở Cuối",
    sortAZ: "A đến Z",
    sortZA: "Z đến A",
    sortFavorites: "Yêu thích",
    createFolder: "Tạo Thư mục",
    addToFolder: "Thêm vào Thư mục",
    deleteFolder: "Xóa Thư mục",
    settings: "Cài đặt",
    exportBookmarks: "Xuất Bookmarks",
    importBookmarks: "Nhập Bookmarks",
    selectAll: "Chọn Tất cả",
    showCheckboxes: "Hiển thị CheckBox",
    hideCheckboxes: "Ẩn CheckBox",
    searchPlaceholder: "Tìm kiếm Bookmarks...",
    renameTitle: "Đổi tên",
    renameFolder: "Đổi tên Thư mục",
    renamePlaceholder: "Nhập tên mới...",
    addToFolderTitle: "Thêm vào Thư mục",
    selectFolder: "Chọn Thư mục",
    newFolderPlaceholder: "Nhập tên thư mục muốn thêm",
    createNewFolder: "Tạo",
    save: "Lưu",
    cancel: "Hủy",
    totalBookmarks: "Tổng Bookmarks",
    scrollToTop: "Cuộn lên Đầu",
    clear: "Xóa",
    deleteConfirm: "Bạn có chắc chắn muốn xóa Bookmark này không?",
    deleteFolderConfirm:
      "Bạn có chắc chắn muốn xóa thư mục này không? Các Bookmark có trong thư mục khác sẽ được giữ lại.",
    discardFolderPrompt: "Bạn đã nhập tên thư mục nhưng chưa lưu. Hủy bỏ nó?",
    noBookmarks: "Không tìm thấy Bookmark. Vui lòng kiểm tra quyền truy cập.",
    emptyTitleError: "Tiêu đề không được để trống",
    emptyFolderError: "Tên thư mục không được để trống",
    selectFolderError: "Chọn một thư mục hoặc tạo mới",
    errorUnexpected: "Đã xảy ra lỗi không mong muốn. Vui lòng thử lại.",
    clearRenameAria: "Xóa nội dung nhập đổi tên",
    clearSearchAria: "Xóa nội dung tìm kiếm",
    settingsButtonAria: "Mở menu cài đặt",
    addToFolderOption: "Thêm vào Thư mục",
    deleteBookmarkOption: "Xóa",
    renameBookmarkOption: "Đổi tên",
    editInNewTabOption: "Chỉnh sửa trong Tab Mới",
    deleteBookmarks: "Xóa bookmark",
    importSuccess: "Bookmark đã được nhập thành công!",
    importDuplicatePrompt:
      "Một số Bookmark đã tồn tại (cùng URL). Bạn có muốn nhập các Bookmark không trùng lặp không?",
    importInvalidFile:
      "Định dạng tệp không hợp lệ. Vui lòng chọn tệp JSON Bookmark hợp lệ.",
    importError: "Không thể nhập Bookmark. Vui lòng thử lại.",
    deleteBookmarkSuccess: "Bookmark đã được xóa thành công!",
    exportPrompt:
      "Chọn định dạng xuất: JSON hoặc HTML (dữ liệu sẽ được lưu dưới dạng JSON).",
    createFolderSuccess: "Thư mục được tạo thành công!",
    successTitle: "Thành công",
    errorTitle: "Lỗi",
    confirmTitle: "Xác nhận",
    renameSuccess: "Bookmark được đổi tên thành công!",
    deleteBookmarkSuccess: "Bookmark đã được xóa thành công!",
    addToFolderSuccess:
      "Đã thêm bookmark vào thư mục (Tải lại để cập nhật dữ liệu).",
    createFolderSuccess: "Thư mục được tạo thành công!",
    duplicateTitleError: "Tiêu đề đã tồn tại trong thư mục này",
    emptyTitleError: "Vui lòng nhập tiêu đề",
    emptyFolderError: "Vui lòng nhập tên thư mục hoặc chọn một thư mục",
    noBookmarksSelected: "Không có Bookmark nào được chọn",
    selectFolderError: "Vui lòng chọn một thư mục",
    errorUnexpected: "Đã xảy ra lỗi không mong muốn",
    restartExtension: "Vui lòng thử lại hoặc khởi động lại extension.",
    deleteConfirm: "Bạn có chắc chắn muốn xóa Bookmark này không?",
    renamePlaceholder: "Nhập tên Bookmark mới",
    newFolderPlaceholder: "Nhập tên thư mục",
    selectFolder: "Chọn Thư mục",
    exportTitle: "Xuất Bookmarks",
    advancedSettings: "Cài đặt Nâng cao (HTML & CSV)",
    includeIconData: "Bao gồm dữ liệu biểu tượng (Base64)",
    includeCreationDates: "Bao gồm ngày tạo",
    includeFolderModDates: "Bao gồm ngày chỉnh sửa thư mục",
    popupSubtitle: "Chọn định dạng xuất và cài đặt bạn muốn",
    exportFormat: "Định dạng Xuất",
    jsonDescription: "Định dạng đọc bằng máy (backup và khôi phục với import)",
    htmlDescription: "Trang web tương tác",
    csvDescription: "Dữ liệu bảng (dễ dàng mở trong Excel/Sheets)",
    includeIconDataDescription: "Thêm dữ liệu favicon vào bookmark",
    includeCreationDatesDescription: "Thêm dấu thời gian tạo",
    includeFolderModDatesDescription: "Thêm dấu thời gian thư mục",
    exporting: "Đang xuất...",
    bookmarksTitle: "Bộ Sưu Tập Bookmarks Của Tôi",
    bookmarksHeader: "Bookmarks Của Tôi",
    exportedOn: "Đã in vào ngày",
    loadingBookmarks: "Đang tải bookmarks...",
    generatedBy: "Được tạo bởi Extension Quản lý Bookmark",
    bookmarks: "bookmark",
    folders: "thư mục",
    created: "Đã tạo",
    modified: "Đã chỉnh sửa",
    unnamedFolder: "Thư mục không tên",
    notAvailable: "N/A",
    scrollToTop: "Scroll to Top",
    aiTitle: "Cấu hình AI Chatbot",
    favourite: "Yêu thích",
    favoriteSuccess: "Đã thêm bookmark vào yêu thích!",
    unfavoriteSuccess: "Đã xóa bookmark khỏi yêu thích!",
    helpGuideTitle: "Hướng Dẫn",
    exportChatHistory: "Xuất Lịch Sử Chat",
    maximizeMinimize: "Phóng To/Thu Nhỏ",
    editAIConfig: "Chỉnh Sửa Cấu Hình AI",
    closeChat: "Đóng Chat",
    chatToggle: "Mở Chat",
    noChatHistory: "Không có lịch sử chat",
    loadingChat: "Đang xử lý...",
    moveBookmarkSuccess: "Đã chuyển bookmark thành công",
    moveBookmarkError: "Không tìm thấy bookmark hoặc thư mục không hợp lệ",
    searchFolderResult: "Các thư mục tìm thấy",
    noFoldersFound: "Không tìm thấy thư mục cho",
    aiBookmarkResponse: "Phản hồi AI",
    notSupported:
      "Xin lỗi, tôi chỉ có thể giúp với các tác vụ liên quan đến bookmark hoặc các câu hỏi đơn giản như giờ hoặc ngày.",
    youHave: "Bạn có",
    hereAreYourBookmarks: "Đây là danh sách bookmark của bạn",
    hereAreYourFolders: "Đây là danh sách thư mục của bạn",
    hereAreBookmarksInFolder: "Đây là danh sách bookmark trong thư mục",
    noBookmarksInFolder: "Không có bookmark trong thư mục này",
    addedBookmarkToFolder: "Tôi đã thêm bookmark",
    toFolder: "vào thư mục",
    updatedBookmark: "Tôi đã cập nhật bookmark",
    inFolder: "trong",
    deletedBookmark: "Tôi đã xóa bookmark",
    foundBookmarks: "Tôi tìm thấy",
    bookmarksMatching: "bookmark khớp với",
    noBookmarksFoundFor: "Tôi không tìm thấy bookmark nào khớp với",
    foundFolders: "Tôi tìm thấy các thư mục sau",
    noFoldersFoundFor: "Tôi không tìm thấy thư mục nào khớp với",
    movedBookmark: "Tôi đã chuyển bookmark",
    noFolders: "Bạn chưa có thư mục nào.",
    helpGuide: `
        Hướng Dẫn:

        1. Câu hỏi Ngôn ngữ Tự nhiên:
          - Hỏi tự do, ví dụ: "Tôi có bao nhiêu bookmark?", "Hiển thị bookmark của tôi", hoặc "Tìm bookmark về công nghệ".
          - AI sẽ diễn giải và trả lời bằng hành động bookmark hoặc câu trả lời.

        2. Thêm Bookmark:
          - Lệnh: "bookmark add https://example.com title 'Trang Của Tôi' to folder Tin Tức"
          - Hoặc dùng "Tạo Thư mục" trong sidebar.

        3. Di chuyển Bookmark:
          - Lệnh: "chuyển bookmark 'Trang Của Tôi' sang thư mục Tin Tức"
          - Hoặc hỏi: "Chuyển bookmark có tiêu đề 'Trang Của Tôi' sang thư mục Tin Tức".

        4. Tìm kiếm Bookmark:
          - Lệnh: "tìm bookmark từ khóa" hoặc hỏi: "Tìm bookmark có từ khóa công nghệ".
          - Dùng thanh tìm kiếm hoặc dropdown "Sắp xếp: Mặc định" để tìm thủ công.

        5. Tìm kiếm Thư mục:
          - Lệnh: "tìm thư mục từ khóa" hoặc hỏi: "Thư mục nào có từ News trong tên?".

        6. Liệt kê Bookmark:
          - Lệnh: "danh sách bookmark" hoặc hỏi: "Tôi có những bookmark nào?".

        7. Sửa Bookmark:
          - Lệnh: "edit bookmark https://example.com title 'Tiêu Đề Mới' to folder Công Việc"
          - Hoặc hỏi: "Đổi tên bookmark https://example.com thành Tiêu Đề Mới".

        8. Xóa Bookmark:
          - Lệnh: "delete bookmark https://example.com"
          - Hoặc hỏi: "Xóa bookmark https://example.com của tôi".

        9. Tính năng AI:
          - Cấu hình trong "Cấu hình AI Chatbot" để gợi ý.
          - AI hiểu các câu hỏi và lệnh tự nhiên để quản lý bookmark.

        10. Xuất/Nhập Bookmark:
            - Truy cập qua menu "Cài đặt".
        `,
    clarifyBookmark:
      "Tui tìm thấy nhiều bookmark tên '{title}'. Bạn muốn chỉnh sửa cái nào? Hãy cung cấp URL hoặc thư mục.",
    noBookmarks: "Tui không tìm thấy bookmark nào có {0}.",
  },
}

export function safeChromeBookmarksCall(method, args, callback) {
  try {
    if (!chrome || !chrome.bookmarks || !chrome.bookmarks[method]) {
      console.error(`chrome.bookmarks.${method} is not available`)
      const language = localStorage.getItem("appLanguage") || "en"
      showCustomPopup(translations[language].errorUnexpected, "error", false)
      callback(null)
      return
    }
    chrome.bookmarks[method](...args, (result) => {
      if (chrome.runtime.lastError) {
        console.error(`Error in ${method}:`, chrome.runtime.lastError.message)
        const language = localStorage.getItem("appLanguage") || "en"
        showCustomPopup(translations[language].errorUnexpected, "error", false)
        callback(null)
        return
      }
      callback(result)
    })
  } catch (error) {
    console.error(`Unexpected error in ${method}:`, error)
    const language = localStorage.getItem("appLanguage") || "en"
    showCustomPopup(translations[language].errorUnexpected, "error", false)
    callback(null)
  }
}

export function debounce(func, wait) {
  let timeout
  return function (...args) {
    clearTimeout(timeout)
    timeout = setTimeout(() => func.apply(this, args), wait)
  }
}

export function showCustomPopup(
  message,
  type = "success",
  autoClose = true,
  onConfirm = null,
  showCancel = false
) {
  const popup = document.getElementById("custom-popup")
  const title = document.getElementById("custom-popup-title")
  const messageEl = document.getElementById("custom-popup-message")
  const okButton = document.getElementById("custom-popup-ok")
  const cancelButton = document.getElementById("custom-popup-cancel")
  const language = localStorage.getItem("appLanguage") || "en"

  if (!popup || !title || !messageEl || !okButton) {
    console.error("Custom popup elements missing", {
      popup: !!popup,
      title: !!title,
      messageEl: !!messageEl,
      okButton: !!okButton,
      cancelButton: !!cancelButton,
    })
    return
  }

  try {
    title.textContent =
      type === "success"
        ? translations[language].successTitle
        : translations[language].errorTitle

    messageEl.textContent = message

    popup.classList.remove("hidden")

    const isDarkMode = document.body.classList.contains("dark-theme")
    popup.classList.toggle("light-theme", !isDarkMode)
    popup.classList.toggle("dark-theme", isDarkMode)

    const closePopup = () => {
      popup.classList.add("hidden")
      document.removeEventListener("keydown", handleKeydown)
    }

    okButton.onclick = () => {
      closePopup()
      if (onConfirm) onConfirm()
    }

    if (cancelButton) {
      if (showCancel) {
        cancelButton.classList.remove("hidden")
        cancelButton.onclick = () => closePopup()
      } else {
        cancelButton.classList.add("hidden")
      }
    }

    popup.onclick = (e) => {
      if (e.target === popup) {
        closePopup()
      }
    }

    const handleKeydown = (e) => {
      if (e.key === "Enter") {
        okButton.click()
      } else if (e.key === "Escape") {
        closePopup()
      }
    }

    document.addEventListener("keydown", handleKeydown)

    if (type === "success" && autoClose && !onConfirm) {
      setTimeout(closePopup, 3000)
    }
  } catch (error) {
    console.error("Error in showCustomPopup:", error)
  }
}

export function showCustomConfirm(message, onConfirm, onCancel) {
  const popup = document.getElementById("custom-popup")
  const title = document.getElementById("custom-popup-title")
  const messageEl = document.getElementById("custom-popup-message")
  const okButton = document.getElementById("custom-popup-ok")
  const language = localStorage.getItem("appLanguage") || "en"
  const buttonsContainer = popup?.querySelector(".rename-popup-buttons")

  if (!popup || !title || !messageEl || !okButton || !buttonsContainer) {
    console.error("Custom confirm popup elements missing", {
      popup: !!popup,
      title: !!title,
      messageEl: !!messageEl,
      okButton: !!okButton,
      buttonsContainer: !!buttonsContainer,
    })
    return
  }

  try {
    title.textContent = translations[language].confirmTitle || "Confirm"

    messageEl.textContent = message

    popup.classList.remove("hidden")

    const cancelButton = document.createElement("button")
    cancelButton.className = "button cancel"
    cancelButton.textContent = translations[language].cancel || "Cancel"

    buttonsContainer.appendChild(cancelButton)

    const isDarkMode = document.body.classList.contains("dark-theme")
    popup.classList.toggle("light-theme", !isDarkMode)
    popup.classList.toggle("dark-theme", isDarkMode)

    const closePopup = () => {
      popup.classList.add("hidden")
      if (buttonsContainer.contains(cancelButton)) {
        buttonsContainer.removeChild(cancelButton)
      }
      document.removeEventListener("keydown", handleKeydown)
    }

    okButton.onclick = () => {
      onConfirm()
      closePopup()
    }

    cancelButton.onclick = () => {
      if (onCancel) onCancel()
      closePopup()
    }

    popup.onclick = (e) => {
      if (e.target === popup) {
        if (onCancel) onCancel()
        closePopup()
      }
    }

    const handleKeydown = (e) => {
      if (e.key === "Enter") {
        onConfirm()
        closePopup()
      } else if (e.key === "Escape") {
        if (onCancel) onCancel()
        closePopup()
      }
    }

    document.addEventListener("keydown", handleKeydown)
  } catch (error) {
    console.error("Error in showCustomConfirm:", error)
  }
}

export function showCustomGuide() {
  // Ensure DOM is loaded
  if (!document.getElementById("custom-guide")) {
    console.error(
      "Custom guide popup not found. Waiting for DOMContentLoaded..."
    )
    document.addEventListener("DOMContentLoaded", showCustomGuide)
    return
  }

  const popup = document.getElementById("custom-guide")
  const title = document.getElementById("custom-guide-title")
  const messageEl = document.getElementById("custom-guide-message")
  const okButton = document.getElementById("custom-guide-ok")
  const language = localStorage.getItem("appLanguage") || "en"

  // Log missing elements for debugging
  if (!popup || !title || !messageEl || !okButton) {
    console.error("Custom guide elements missing:", {
      popup: !!popup,
      title: !!title,
      messageEl: !!messageEl,
      okButton: !!okButton,
    })
    // Display a fallback error message
    if (document.getElementById("custom-popup")) {
      showCustomPopup(
        `${translations[language].errorTitle}: ${
          translations[language].errorUnexpected || "Unexpected error"
        }`,
        "error",
        true
      )
    } else {
      alert("Error: Help guide cannot be displayed due to missing elements.")
    }
    return
  }

  try {
    title.textContent = translations[language].helpGuideTitle

    // Parse helpGuide into a list
    const guideContent = translations[language].helpGuide.trim()
    const guideItems = guideContent.split("\n\n").map((item) => {
      const lines = item.trim().split("\n")
      const title = lines[0].replace(/^\d+\.\s*/, "")
      const content = lines
        .slice(1)
        .map((line) => {
          const trimmedLine = line.replace(/^\s*-\s*/, "")
          return `<p>${trimmedLine}</p>`
        })
        .join("")
      return `<li><strong>${title}</strong>${content}</li>`
    })
    messageEl.innerHTML = `<ul>${guideItems.join("")}</ul>`

    popup.classList.remove("hidden")

    const isDarkMode = document.body.classList.contains("dark-theme")
    popup.classList.toggle("light-theme", !isDarkMode)
    popup.classList.toggle("dark-theme", isDarkMode)

    const closePopup = () => {
      popup.classList.add("hidden")
      document.removeEventListener("keydown", handleKeydown)
    }

    okButton.onclick = () => closePopup()

    popup.onclick = (e) => {
      if (e.target === popup) {
        closePopup()
      }
    }

    const handleKeydown = (e) => {
      if (e.key === "Enter" || e.key === "Escape") {
        closePopup()
      }
    }

    document.addEventListener("keydown", handleKeydown)
  } catch (error) {
    console.error("Error in showCustomGuide:", error)
    if (document.getElementById("custom-popup")) {
      showCustomPopup(
        `${translations[language].errorTitle}: ${
          translations[language].errorUnexpected || "Unexpected error"
        }`,
        "error",
        true
      )
    } else {
      alert("Error: Help guide cannot be displayed.")
    }
  }
}
